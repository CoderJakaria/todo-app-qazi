{"version":3,"sources":["Firebase/firebase.js","components/Todo.jsx","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","todo","useState","open","setOpen","input","setInput","Modal","onClose","e","className","placeholder","value","onChange","target","Button","onClick","collection","doc","id","set","merge","variant","color","List","ListItem","ListItemAvatar","ListItemText","primary","secondary","style","marginTop","event","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","type","disabled","preventDefault","add","timestamp","FieldValue","serverTimestamp","oldval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.819179ce.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBaRDR1yaSwvUV2PObTx3G2CaWuC8DiVz8\",\r\n    authDomain: \"todo-app-cp-415b9.firebaseapp.com\",\r\n    projectId: \"todo-app-cp-415b9\",\r\n    storageBucket: \"todo-app-cp-415b9.appspot.com\",\r\n    messagingSenderId: \"236590147660\",\r\n    appId: \"1:236590147660:web:cb4a31d3f44aebc5462ce9\",\r\n    measurementId: \"G-Z7CX4HX70P\"\r\n  });\r\n\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db","import React, { useState } from 'react';\r\nimport { Button, List, ListItem, ListItemAvatar, ListItemText, Modal } from '@material-ui/core';\r\nimport \"./Todo.css\";\r\nimport db from \"../Firebase/firebase\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 400,\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\n\r\n\r\n\r\nconst Todo = ({todo}) => {\r\n    const classes = useStyles()\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [input, setInput] = useState(\"\")\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n\r\n    const updateTodo = () => {\r\n        // update the todo with new input text //\r\n        db.collection(\"todos\").doc(todo.id).set({\r\n            todo: input\r\n        }, {merge: true});\r\n\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Modal\r\n              open={open}\r\n              onClose={e => setOpen(false)}\r\n            >\r\n                <div className=\"edit_area\">\r\n                    <h1 className=\"edit_title\">Edit Here</h1>\r\n                    <input placeholder={todo.todo} value={input} onChange={e => setInput(e.target.value)} />\r\n                    <Button className=\"update_btn\" onClick={updateTodo} variant=\"contained\" color=\"secondary\" >Update ToDo</Button>\r\n                </div>\r\n            </Modal>\r\n\r\n            <List className=\"todo_list\">\r\n                <ListItem className=\"list_item\">\r\n                   <ListItemAvatar /> \r\n                    <ListItemText primary={todo.todo} secondary=\"Dummy DeadLine ⏰\" />\r\n                </ListItem>\r\n                \r\n                <div className=\"btn_wrapper\">\r\n                    <Button style={{marginTop: \"28px\"}} onClick={e => setOpen(true)} variant=\"contained\" color=\"secondary\">Edit</Button>\r\n                    <DeleteForeverIcon className=\"delete_icon\" onClick={event => db.collection(\"todos\").doc(todo.id).delete() } />\r\n                </div>\r\n            </List>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport { FormControl, FormHelperText, Input, InputLabel } from '@material-ui/core';\nimport Todo from './components/Todo';\nimport db from './Firebase/firebase';\nimport firebase from 'firebase';\n\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n\n  // When the app loads, we need to listen to the database and fetch new todos as they get adde/removed\n  useEffect(()=> {\n    // this code fires when app.js loads\n    db.collection(\"todos\").orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({ id:doc.id, todo:doc.data().todo}) ))\n    })\n  },[])\n\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  }\n\n  const handleClick = (e) => {\n    e.preventDefault() // kill the behaviour of form sumbit like refresh //\n\n\n        db.collection(\"todos\").add({\n          todo: input,\n          timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        })\n\n        setTodos((oldval)=>{\n          return [...oldval, input]\n        });\n\n        setInput(''); // clear the input area when button was clicked //\n  }\n\n  return (\n    <div className=\"App\">\n        <h1> ToDo List App (powered by firebase)🚀🚀 </h1>\n        <form>\n          <FormControl>\n              <InputLabel>Write a ToDo</InputLabel>\n              <Input type=\"text\" value={input} onChange={handleChange} />\n          </FormControl>\n\n          <Button disabled={!input} type=\"submit\" onClick={handleClick} variant=\"contained\" color=\"primary\">\n              Add ToDo\n          </Button>\n        </form>\n\n        <ul>\n          {\n            todos.map(todo => (\n              <Todo key={todo.id} todo={todo} />\n            ))\n          }\n        </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}